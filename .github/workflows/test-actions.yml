name: test
on:
  push:
    branches:
      - dev

env:
  REGISTRY: ghcr.io
  COMPANY: yaricp/qr_bill_app
  IMAGE_NAME_API: rest_api
  IMAGE_NAME_FRONTEND: frontend
  IMAGE_NAME_TELEGRAM_BOT: telegram_bot


jobs:
  test-build-images:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 2
      - name: Log in to the Container registry
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.PAT_RUNNER }}
      - name: Check changes in backend/rest_api
        id: rest_api_changed
        run: |
          OUTPUT=$( git diff HEAD\^ HEAD -- backend/rest_api | tail -1) &&
          echo "::set-output name=OUTPUT::$OUTPUT"
      - name: Check changes in backend/telegram_bot
        id: tg_changed
        run: |
          OUTPUT=$( git diff HEAD\^ HEAD -- backend/tg_bot | tail -1) &&
          echo "::set-output name=OUTPUT::$OUTPUT"
      - name: Check changes in frontend
        id: frontend_changes
        run: |
          OUTPUT=$( git diff HEAD\^ HEAD -- frontend | tail -1) &&
          echo "::set-output name=OUTPUT::$OUTPUT"
      - name: Build and push rest_api image. 
        if: ${{ (steps.rest_api_changed.outputs.OUTPUT != '')}}
        env:
          INSTALL_DEV: ${{ vars.INSTALL_DEV }}
          NAME_IMAGE_API: ${{ vars.NAME_IMAGE_API }}
          NAME_IMAGE_FRONTEND: ${{ vars.NAME_IMAGE_FRONTEND }}
          NAME_IMAGE_TELEGRAM_BOT: ${{ vars.NAME_IMAGE_TELEGRAM_BOT }}
          POSTGRES_HOST: ${{ vars.POSTGRES_HOST }}
          POSTGRES_DB: ${{ vars.POSTGRES_DB }}
          POSTGRES_USER: ${{ vars.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ vars.POSTGRES_PASSWORD }}
          PGADMIN_DEFAULT_EMAIL: ${{ vars.PGADMIN_DEFAULT_EMAIL }}
          PGADMIN_DEFAULT_PASSWORD: ${{ vars.PGADMIN_DEFAULT_PASSWORD }}
          SECRET_KEY: ${{ vars.SECRET_KEY }}
          API_PREFIX: ${{ vars.API_PREFIX }}
          ORIGINS: ${{ vars.ORIGINS }}
          UVICORN_WORKERS: ${{ vars.UVICORN_WORKERS }}
          DEBUG: ${{ vars.DEBUG }}
          API_LOGIN: ${{ vars.API_LOGIN }}
          API_PASSWORD: ${{ vars.API_PASSWORD }}
        run: |
          docker compose build api;
          docker compose pull api;
      - name: Run unittests for rest_api. 
        if: ${{ (steps.rest_api_changed.outputs.OUTPUT != '')}}
        env:
          INSTALL_DEV: ${INSTALL_DEV}
          NAME_IMAGE_API: ${NAME_IMAGE_API}
          NAME_IMAGE_FRONTEND: ${NAME_IMAGE_FRONTEND}
          NAME_IMAGE_TELEGRAM_BOT: ${NAME_IMAGE_TELEGRAM_BOT}
          POSTGRES_HOST: ${POSTGRES_HOST}
          POSTGRES_DB: ${POSTGRES_DB}
          POSTGRES_USER: ${POSTGRES_USER}
          POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
          PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
          PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
          SECRET_KEY: ${SECRET_KEY}
          API_PREFIX: ${API_PREFIX}
          ORIGINS: ${ORIGINS}
          UVICORN_WORKERS: ${UVICORN_WORKERS}
          DEBUG: ${DEBUG}
          API_LOGIN: ${API_LOGIN}
          API_PASSWORD: ${API_PASSWORD} 
        run: |
          docker compose up -d;
          docker compose exec -T api poetry run pytest tests/api;
          docker compose down;
      - name: Build and push image tg
        if: ${{ (steps.tg_changed.outputs.OUTPUT != '') }}
        env:
          INSTALL_DEV: ${{ env.INSTALL_DEV }}
          NAME_IMAGE_API: ${{ env.NAME_IMAGE_API }}
          NAME_IMAGE_FRONTEND: ${{ env.NAME_IMAGE_FRONTEND }}
          NAME_IMAGE_TELEGRAM_BOT: ${{ env.NAME_IMAGE_TELEGRAM_BOT }}
          POSTGRES_HOST: ${{ env.POSTGRES_HOST }}
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
          PGADMIN_DEFAULT_EMAIL: ${{ env.PGADMIN_DEFAULT_EMAIL }}
          PGADMIN_DEFAULT_PASSWORD: ${{ env.PGADMIN_DEFAULT_PASSWORD }}
          SECRET_KEY: ${{ env.SECRET_KEY }}
          API_PREFIX: ${{ env.API_PREFIX }}
          ORIGINS: ${{ env.ORIGINS }}
          UVICORN_WORKERS: ${{ env.UVICORN_WORKERS }}
          DEBUG: ${{ env.DEBUG }}
          API_LOGIN: ${{ env.API_LOGIN }}
          API_PASSWORD: ${{ env.API_PASSWORD }}
        run: |
          docker compose build tg;
          docker compose push tg;
      - name: Build and push image frontend 
        if: ${{ (steps.frontend_changes.outputs.OUTPUT != '') }}
        env:
          # NAME_IMAGE_API: ${{ env.REGISTRY }}/${{ env.COMPANY }}/${{ env.IMAGE_NAME_API }}:test
          # NAME_IMAGE_FRONTEND: ${{ env.REGISTRY }}/${{ env.COMPANY }}/${{ env.IMAGE_NAME_FRONTEND }}:test
          # NAME_IMAGE_TELEGRAM_BOT: ${{ env.REGISTRY }}/${{ env.COMPANY }}/${{ env.IMAGE_NAME_TELEGRAM_BOT }}:test
          INSTALL_DEV: ${{ env.INSTALL_DEV }}
          NAME_IMAGE_API: ${{ env.NAME_IMAGE_API }}
          NAME_IMAGE_FRONTEND: ${{ env.NAME_IMAGE_FRONTEND }}
          NAME_IMAGE_TELEGRAM_BOT: ${{ env.NAME_IMAGE_TELEGRAM_BOT }}
          POSTGRES_HOST: ${{ env.POSTGRES_HOST }}
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
          PGADMIN_DEFAULT_EMAIL: ${{ env.PGADMIN_DEFAULT_EMAIL }}
          PGADMIN_DEFAULT_PASSWORD: ${{ env.PGADMIN_DEFAULT_PASSWORD }}
          SECRET_KEY: ${{ env.SECRET_KEY }}
          API_PREFIX: ${{ env.API_PREFIX }}
          ORIGINS: ${{ env.ORIGINS }}
          UVICORN_WORKERS: ${{ env.UVICORN_WORKERS }}
          DEBUG: ${{ env.DEBUG }}
          API_LOGIN: ${{ env.API_LOGIN }}
          API_PASSWORD: ${{ env.API_PASSWORD }}
        run: |
          docker compose build frontend;
          docker compose push frontend;
   
# - name: install docker and docker-compose
#         run: |
#           sudo apt update -y;
#           sudo apt install -y docker.io;
#           sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose;
#           sudo chmod +x /usr/local/bin/docker-compose;

  deploy-test-server:
    needs: test-build-images
    runs-on: sibecodome2
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 2
      - name: Prepare folders and configs
        run: |
          mkdir -p /home/githubrunner/docker-compose-area/test/grafana
          mkdir -p /home/githubrunner/docker-compose-area/test/prometheus
      - name: Copy docker files to work folder
        run: cp test-docker-compose.yml /home/githubrunner/docker-compose-area/test/docker-compose.yml
      - name: Check changes in backend/rest_api
        id: rest_api_changed
        run: |
          OUTPUT=$( git diff HEAD\^ HEAD -- backend/rest_api | tail -1) &&
          echo "::set-output name=OUTPUT::$OUTPUT"
      - name: Log in to the Container registry
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.PAT_RUNNER }}
      - name: pull latest packages images
        run: |
          docker pull ${{ env.REGISTRY }}/${{ env.COMPANY }}/${{ env.NAME_IMAGE_REST_API_PACKAGES }}:test;
          #  pull ${{ env.REGISTRY }}/${{ env.COMPANY }}/${{ env.NAME_IMAGE_CELERY_FER }}:last;
          docker pull ${{ env.REGISTRY }}/${{ env.COMPANY }}/${{ env.NAME_IMAGE_MONTAGE_PACKAGES }}:test;
      - name: delete old previous images
        run: |
          docker rmi ${{ env.REGISTRY }}/${{ env.COMPANY }}/${{ env.IMAGE_NAME_API }}:test_prev;
          docker rmi ${{ env.REGISTRY }}/${{ env.COMPANY }}/${{ env.IMAGE_NAME_TELEGRAM_BOT }}:test_prev;
      - name: make tag to old stable version images
        run: |
          docker tag ${{ env.REGISTRY }}/${{ env.COMPANY }}/${{ env.IMAGE_NAME_API }}:test ${{ env.REGISTRY }}/${{ env.COMPANY }}/${{ env.IMAGE_NAME_API }}:test_prev;
          docker tag ${{ env.REGISTRY }}/${{ env.COMPANY }}/${{ env.IMAGE_NAME_TELEGRAM_BOT }}:test ${{ env.REGISTRY }}/${{ env.COMPANY }}/${{ env.IMAGE_NAME_TELEGRAM_BOT }}:test_prev;
      - name: Pull new images
        env:
          NAME_IMAGE_API: ${{ env.REGISTRY }}/${{ env.COMPANY }}/${{ env.IMAGE_NAME_API }}:test
          NAME_IMAGE_FRONTEND: ${{ env.REGISTRY }}/${{ env.COMPANY }}/${{ env.IMAGE_NAME_FRONTEND }}:test
          NAME_IMAGE_TELEGRAM_BOT: ${{ env.REGISTRY }}/${{ env.COMPANY }}/${{ env.IMAGE_NAME_TELEGRAM_BOT }}:test
        run: |
          cd /home/githubrunner/docker-compose-area/test;
          docker-compose pull sorter;
          docker-compose pull api;
          docker-compose pull montage;
          docker-compose pull tg;
          docker-compose pull trassir;
      - name: Stop old images
        run: cd /home/githubrunner/docker-compose-area/test && docker-compose down
      - name: start new images
        env:
          NAME_IMAGE_API: ${{ env.REGISTRY }}/${{ env.COMPANY }}/${{ env.IMAGE_NAME_API }}:test
          NAME_IMAGE_RAY_MONTAGE: ${{ env.REGISTRY }}/${{ env.COMPANY }}/${{ env.IMAGE_NAME_RAY_MONTAGE }}:test
          NAME_IMAGE_FRONTEND: ${{ env.REGISTRY }}/${{ env.COMPANY }}/${{ env.IMAGE_NAME_FRONTEND }}:test
          NAME_IMAGE_SORTER: ${{ env.REGISTRY }}/${{ env.COMPANY }}/${{ env.IMAGE_NAME_SORTER }}:test
          NAME_IMAGE_TELEGRAM_BOT: ${{ env.REGISTRY }}/${{ env.COMPANY }}/${{ env.IMAGE_NAME_TELEGRAM_BOT }}:test
          NAME_IMAGE_TRASSIR_CLIENT: ${{ env.REGISTRY }}/${{ env.COMPANY }}/${{ env.IMAGE_NAME_TRASSIR_CLIENT }}:test
          VERSION: ${{ env.VERSION }}
          POSTGRES_HOST: pg
          POSTGRES_DB: megatroll_db
          POSTGRES_USER: megatroll
          POSTGRES_PASSWORD: somepass
          PGADMIN_DEFAULT_EMAIL: DroneSelfieAccess@gmail.com
          PGADMIN_DEFAULT_PASSWORD: somepass
          REDIS_HOST: redis
          REDIS_PORT: 6379
          APP_MONTAGE_PORT: 8006
          RAY_DASHBOARD_MONTAGE_PORT: ${{ env.RAY_DASHBOARD_MONTAGE_PORT }}
          TELEGRAM_BOT_TOKEN: ${{ secrets.TEST_TELEGRAM_BOT_TOKEN }}
          TELEGRAM_FLIGHT_CHAT_ID: ${{ secrets.TEST_TELEGRAM_FLIGHT_CHAT_ID }}
          TELEGRAM_REG_BOT_TOKEN : ${{ env.TELEGRAM_REG_BOT_TOKEN }}
          TELEGRAM_REG_BOT_READY_MESSAGE: "test messaage"
          TELEGRAM_SUPPORT_CHAT_ID: ${{ env.TELEGRAM_SUPPORT_CHAT_ID }}
          GOPRO_CAMERA_COMMAND: ${{ env.GOPRO_CAMERA_COMMAND }}
          MASTER_EMAIL: pr@droneselfie.tech
          SMTP_SERVER: smtp.yandex.ru
          SMTP_SERVER_PORT: 587
          SMTP_SERVER_PASSWORD: ${{ secrets.TEST_SMTP_SERVER_PASSWORD }}
          MAIL_NAME_ATTRACTION: MegaTroll
          VIDEO_SOURCES_DIR: /mnt/goprosync/test_videos
          STATIC_SOURCES_DIR: /mnt/goprosync/auxiliary_files
          FINAL_VIDEO_PREFIX: sky-park-
          OUTPUT_VIDEO: video.mp4
          MOBILE_RESOLUTION: 720x480
          VIDEO_SPEED_RENDER_PRESET: fast
          DATABASE_URL: postgresql+psycopg2://megatroll:somepass@pg/megatroll_db
          S3_DISK_DIR: /mnt/goprosync/disk-s3/TEST_NEW_SERVICE
          SECRET_KEY: "123123123123123123123123123123123123123123123"
          API_PREFIX: /api/v1
          ORIGINS: http://localhost:8080,https://192.168.195.205,http://192.168.195.205
          MATCHING_VIDEO_TO_TICKET_DELTA: 3
          DEFAULT_DEVICES: '{"DroneZip":{"sn":"678567345", "type": "share"},"GoproStart":{"sn":"C3461324923228", "type": "share"},"GoproBucket":{"sn":"C3461325039159", "type": "share"},"DroneMega": {"sn": "345345345", "type":"share"}}'
          PACKAGE_TYPES: 2gopro,drone+2gopro,gopro,drone,drone+gopro
          DICT_TYPES_PACKAGES: '{"gopro+drone":{"use_individual_device":"True","share_devices":["DroneZip"]},"drone":{"use_individual_device":"False","share_devices":["DroneZip"]},"gopro":{"use_individual_device":"True","share_devices":[]},"2gopro":{"use_individual_device":"False","share_devices":["GoproStart","GoproBucket"]},"drone+2gopro":{"use_individual_device":"False","share_devices":["GoproStart","GoproBucket","DroneMega"]}}'
          SOURCE_TYPES: share,individual,intro,introfly_summer,logo,music,outro,droneout_summer,silent,intro_fly
          DEFAULT_SOURCES: '{"intro":"/mnt/goprosync/auxiliary_files/IntroMega.mp4","introfly_summer":"/mnt/goprosync/auxiliary_files/introfly_summer.mp4","logo":"/mnt/goprosync/auxiliary_files/Logos.png","music":"/mnt/goprosync/auxiliary_files/musicMega.mp3","outro":"/mnt/goprosync/auxiliary_files/OutroMega.mp4","droneout_summer":"/mnt/goprosync/auxiliary_files/droneout_summer.mp4","silent":"/mnt/goprosync/auxiliary_files/silent.mp3","intro_fly":"/mnt/goprosync/auxiliary_files/introfly_summer.mp4","drone_out":"/mnt/goprosync/auxiliary_files/droneout_summer.mp4"}'
          AUTHENTICATION_URL: http://localhost/api/v1/auth/login
          VIDEO2_URL: http://localhost/api/v1/video2
          GET_DEVICES_LIST_URL: http://localhost/api/v1/devices/
          UVICORN_WORKERS: 2
          DEBUG: "False"
          REST_API_TIMEOUT: 5
          TIME_ZONE: 0
          DEFAULT_LANG: ru
          POSTSALE: True
          TRIM_SOURCE: True
          USE_QR_IN_SOURCE: True
          DEFAULT_PACKAGETYPE: gopro
          SYSTEM_LOGO_STATIC_TYPE: system_logo
          INSTALL_DEV: "false"
          LETTER_SERVER: "T"
          API_LOGIN: admin
          API_PASSWORD: "admin"
          AWS_S3_BUCKET_NAME: drone-selfie-server-dev-1
          AWS_ACCESS_KEY_ID: ${{ secrets.TEST_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.TEST_AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: eu-west-1
          AWS_CLOUDFRONT_URL: https://drone-selfie-server-dev-1.s3.amazonaws.com/
          TEST_EMAIL: yaricp@gmail.com
          TEST_CAMERA_BUCKET: C3461325039159
          TEST_CAMERA_START: C3461324923228
          CAMERAS: C3461325039159,C3461324923228
          NAME_ATTRACTION: MegaTroll
          PERSONAL_CABINET_URL: http://192.168.195.205:85/api/v1
          PERSONAL_CABINET_AUTHENTICATION_URL: link-server
          PERSONAL_CABINET_LOGIN_URL: http://192.168.195.205:85/login?link=
          PERSONAL_CABINET_GET_ATTRACTIONS: attractions
          PERSONAL_CABINET_CREATE_TICKET: tickets
          VALIDATION_DURATION_RANGE: 10,3600
          FFMPEG_THREADS: 3
          VIDEO_BITRATE: 15M
          JSON_PATH: /mnt/goprosync/json-data
          JSON_API_URL: https://manifest.skypark.dev.defa.ru/api/toe-tag/notification
          JSON_API_TOKEN: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwOi8vbG9jYWxob3N0OjgxL2FwaS9sb2dpbiIsImlhdCI6MTY2MDYyODg1MSwiZXhwIjoxNjYwNjMyNDUxLCJuYmYiOjE2NjA2Mjg4NTEsImp0aSI6Im4xRGVBTHI3eU1xQkg4YmUiLCJzdWIiOiI0IiwicHJ2IjoiMjNiZDVjODk0OWY2MDBhZGIzOWU3MDFjNDAwODcyZGI3YTU5NzZmNyJ9.MQdnWEY4Fcp_DASvDxbmKPWGzEhFiVH3fEqhX8HpLf8
        run: cd /home/githubrunner/docker-compose-area/test && docker-compose up -d
      - name: Sync .env file
        run: |
          cd /home/githubrunner/docker-compose-area/test;
          var=$(docker-compose exec -T api env);
          mv .env .env_old;
          echo "$var" > .env;
          var=$(docker-compose exec -T pg env);
          echo "$var" >> .env;
          var=$(docker-compose exec -T pgadmin4 env);
          echo "$var" >> .env;
          var=$(docker-compose exec -T tg env);
          echo "$var" >> .env;
          var=$(docker-compose exec -T frontend env);
          echo "$var" >> .env;
          echo -e "NAME_IMAGE_API=${{ env.REGISTRY }}/${{ env.COMPANY }}/${{ env.IMAGE_NAME_API }}:test" >> .env;
          echo -e "NAME_IMAGE_FRONTEND=${{ env.REGISTRY }}/${{ env.COMPANY }}/${{ env.IMAGE_NAME_FRONTEND }}:test" >> .env;
          echo -e "NAME_IMAGE_TELEGRAM_BOT=${{ env.REGISTRY }}/${{ env.COMPANY }}/${{ env.IMAGE_NAME_TELEGRAM_BOT }}:test" >> .env;

