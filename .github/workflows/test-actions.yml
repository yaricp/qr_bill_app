name: test
on:
  push:
    branches:
      - dev

env:
  VERSION: 2.0.1
  RESOURCE_NUM_CPU_PG: '0.75'
  RESOURCE_MEMORY_PG: 500M
  RESOURCE_NUM_CPU_API: '0.75'
  RESOURCE_MEMORY_API: 500M
  RESOURCE_NUM_CPU_SORTER: '0.25'
  RESOURCE_MEMORY_SORTER: 250M
  RESOURCE_NUM_CPU_REDIS: '0.25'
  RESOURCE_MEMORY_REDIS: 500M
  RESOURCE_NUM_CPU_TG: '0.5'
  RESOURCE_MEMORY_TG: 500M
  RESOURCE_NUM_CPU_TRASSIR: '0.5'
  RESOURCE_MEMORY_TRASSIR: 500M
  RESOURCE_NUM_CPU_PGADMIN: '0.25'
  RESOURCE_MEMORY_PGADMIN: 150M
  RESOURCE_NUM_CPU_FRONTEND: '0.25'
  RESOURCE_MEMORY_FRONTEND: 100M
  RESOURCE_NUM_CPU_RAY_MONTAGE: 7
  RESOURCE_MEMORY_RAY_MONTAGE: 19000M
  RAY_MONTAGE_DEFAULT_COUNT_ACTORS: 10
  REGISTRY: ghcr.io
  COMPANY: droneselfiecompany
  IMAGE_NAME_API: rest_api
  IMAGE_NAME_RAY_MONTAGE: ray_montage
  IMAGE_NAME_FRONTEND: frontend
  IMAGE_NAME_SORTER: incoming_sorter
  IMAGE_NAME_TELEGRAM_BOT: telegram_bot
  IMAGE_NAME_TRASSIR_CLIENT: trassir_client
  NAME_IMAGE_REST_API_PACKAGES: rest_api_packages
  NAME_IMAGE_MONTAGE_PACKAGES: ray_montage_packages
  TELEGRAM_REG_BOT_TOKEN: 7182600499:AAGWEpLwZnNTY-AzMPAMniN-IJG4umDdePQ
  TELEGRAM_SUPPORT_CHAT_ID: 121223
  GOPRO_CAMERA_COMMAND: test_command
  RAY_DASHBOARD_MONTAGE_PORT: 8265
  

# ubuntu-latest

jobs:
  test-build-images:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 2
      - name: Log in to the Container registry
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.PAT_RUNNER }}
      - name: Check changes in incoming_sorter
        id: sorter_changes
        run: |
          OUTPUT=$( git diff HEAD\^ HEAD -- incoming_sorter | tail -1) &&
          echo "::set-output name=OUTPUT::$OUTPUT"
      - name: Check changes in backend/rest_api
        id: rest_api_changed
        run: |
          OUTPUT=$( git diff HEAD\^ HEAD -- backend/rest_api | tail -1) &&
          echo "::set-output name=OUTPUT::$OUTPUT"
      - name: Check changes in backend/montage
        id: montage_changes
        run: |
          OUTPUT=$( git diff HEAD\^ HEAD -- backend/montage | tail -1) &&
          echo "::set-output name=OUTPUT::$OUTPUT"
      - name: Check changes in backend/telegram_bot
        id: tg_changed
        run: |
          OUTPUT=$( git diff HEAD\^ HEAD -- backend/telegram_bot | tail -1) &&
          echo "::set-output name=OUTPUT::$OUTPUT"
      - name: Check changes in backend/trassir_client
        id: trassir_changed
        run: |
          OUTPUT=$( git diff HEAD\^ HEAD -- backend/trassir_client | tail -1) &&
          echo "::set-output name=OUTPUT::$OUTPUT"
      - name: Check changes in docker rest_api
        id: docker_api_changes
        run: |
          OUTPUT=$( git diff HEAD\^ HEAD -- docker/rest_api | tail -1) &&
          echo "::set-output name=OUTPUT::$OUTPUT"
      - name: Check changes in docker montage
        id: docker_montage_changes
        run: |
          OUTPUT=$( git diff HEAD\^ HEAD -- backend/montage/Dockerfile | tail -1) &&
          echo "::set-output name=OUTPUT::$OUTPUT"
      - name: Check changes in docker sorter
        id: docker_sorter_changes
        run: |
          OUTPUT=$( git diff HEAD\^ HEAD -- docker/incoming_sorter | tail -1) &&
          echo "::set-output name=OUTPUT::$OUTPUT"
      - name: Check changes in poetry packages
        id: packages_changes
        run: |
          OUTPUT=$( git diff HEAD\^ HEAD -- backend/poetry.lock backend/pyproject.toml | tail -1 ) &&
          echo "::set-output name=OUTPUT::$OUTPUT"
      - name: Check changes in poetry packages rest_api
        id: rest_api_packages_changes
        run: |
          OUTPUT=$( git diff HEAD\^ HEAD -- backend/rest_api/poetry.lock backend/rest_api/pyproject.toml | tail -1 ) &&
          echo "::set-output name=OUTPUT::$OUTPUT"
      - name: Check changes in poetry packages montage
        id: montage_packages_changes
        run: |
          OUTPUT=$( git diff HEAD\^ HEAD -- backend/montage/poetry.lock backend/montage/pyproject.toml | tail -1 ) &&
          echo "::set-output name=OUTPUT::$OUTPUT"
      - name: build and push image with rest_api packages if packages was changed
        if: ${{ (steps.rest_api_packages_changes.outputs.OUTPUT != '') }}
        env:
          INSTALL_DEV: "True"
        run: |
          docker build --build-arg INSTALL_DEV=${INSTALL_DEV} \
          -t ${{ env.REGISTRY }}/${{ env.COMPANY }}/rest_api_packages:test \
          -f ./docker/rest_api_packages.dockerfile ./backend/;
          docker push ${{ env.REGISTRY }}/${{ env.COMPANY }}/rest_api_packages:test
      - name: build and push image with montage packages if packages was changed
        if: ${{ (steps.montage_packages_changes.outputs.OUTPUT != '') }}
        env:
          INSTALL_DEV: "True"
        run: |
          echo "${{ env.REGISTRY }}/${{ env.COMPANY }}/${{ env.NAME_IMAGE_MONTAGE_PACKAGES }}:test";
          docker build --build-arg INSTALL_DEV=${INSTALL_DEV} \
          -t ${{ env.REGISTRY }}/${{ env.COMPANY }}/${{ env.NAME_IMAGE_MONTAGE_PACKAGES }}:test \
          -f ./docker/ray/ray_montage_packages.dockerfile ./backend/montage;
          docker images;
          docker push ${{ env.REGISTRY }}/${{ env.COMPANY }}/${{ env.NAME_IMAGE_MONTAGE_PACKAGES }}:test;
      - name: Build rest_api image. 
        if: ${{ (steps.rest_api_changed.outputs.OUTPUT != '') || (steps.docker_api_changes.outputs.OUTPUT != '')}}
        env:
          INSTALL_DEV: "True"
          NAME_IMAGE_REST_API_PACKAGES: ${{ env.REGISTRY }}/${{ env.COMPANY }}/rest_api_packages:test
          NAME_IMAGE_API: ${{ env.REGISTRY }}/${{ env.COMPANY }}/${{ env.IMAGE_NAME_API }}:test
          NAME_IMAGE_FRONTEND: ${{ env.REGISTRY }}/${{ env.COMPANY }}/${{ env.IMAGE_NAME_FRONTEND }}:test
        run: |
          docker compose build api;
          docker tag ghcr.io/droneselfiecompany/rest_api:test ghcr.io/droneselfiecompany/ray_emotions:test;
      - name: Prepare folders and files for test
        if: ${{ (steps.rest_api_changed.outputs.OUTPUT != '') || (steps.sorter_changes.outputs.OUTPUT != '') || (steps.docker_api_changes.outputs.OUTPUT != '') || (steps.docker_celery_changes.outputs.OUTPUT != '') || (steps.celery_changes.outputs.OUTPUT != '')}}
        env:
          S3_BUCKET: skypark-zipline-moscow
          AWS_ENDPOINT_URL: https://storage.yandexcloud.net
          CLOUDFRONT_URL: https://storage.yandexcloud.net/skypark-zipline-moscow/
          AWS_ACCESS_KEY_ID: ${{ secrets.TEST_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.TEST_AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ru-central1
        run: |
          ls -a /home;
          mkdir -p backend/auxiliary_files;
          mkdir -p backend/rest_api/tests/files;
          # mkdir -p backend/celery_app/tests/files;
          mkdir -p backend/mail/templates;
          mkdir -p incoming_sorter/tests/files;
          pip3 install boto3;
          tools/copy_files_for_tests.py files_for_tests/ backend/auxiliary_files;
          tools/copy_files_for_tests.py mail_templates/ backend/mail/templates;
          ls -a backend/auxiliary_files/;
          mv backend/auxiliary_files/gopro.mp4 backend/rest_api/tests/files/;
          mv backend/auxiliary_files/drone.mp4 backend/rest_api/tests/files/;
          mv backend/auxiliary_files/test_video.mp4 backend/rest_api/tests/files/;
          mv backend/auxiliary_files/test.avi backend/rest_api/tests/files/;
          # mv backend/auxiliary_files/emo_start.mp4 backend/celery_app/tests/emotions/files/start.mp4;
          cp backend/rest_api/tests/files/* incoming_sorter/tests/files;
          ls -a backend/auxiliary_files;
          ls -a backend/rest_api/tests/files;
          ls -a incoming_sorter/tests/files;
          ls -a backend/mail/templates;
      - name: Run unittests for rest_api. 
        if: ${{ (steps.rest_api_changed.outputs.OUTPUT != '') || (steps.docker_api_changes.outputs.OUTPUT != '')}}
        env:
          INSTALL_DEV: "True"
          NAME_IMAGE_REST_API_PACKAGES: ${{ env.REGISTRY }}/${{ env.COMPANY }}/${{ env.NAME_IMAGE_REST_API_PACKAGES}}:test
          NAME_IMAGE_API: ${{ env.REGISTRY }}/${{ env.COMPANY }}/${{ env.IMAGE_NAME_API }}:test
          NAME_IMAGE_RAY_MONTAGE: ${{ env.REGISTRY }}/${{ env.COMPANY }}/${{ env.IMAGE_NAME_RAY_MONTAGE }}:test
          NAME_IMAGE_FRONTEND: ${{ env.REGISTRY }}/${{ env.COMPANY }}/${{ env.IMAGE_NAME_FRONTEND }}:test
          NAME_IMAGE_SORTER: ${{ env.REGISTRY }}/${{ env.COMPANY }}/${{ env.IMAGE_NAME_SORTER }}:test
          NAME_IMAGE_TELEGRAM_BOT: ${{ env.REGISTRY }}/${{ env.COMPANY }}/${{ env.IMAGE_NAME_TELEGRAM_BOT }}:test
          NAME_IMAGE_TRASSIR_CLIENT: ${{ env.REGISTRY }}/${{ env.COMPANY }}/${{ env.IMAGE_NAME_TRASSIR_CLIENT }}:test
          POSTGRES_HOST: pg
          POSTGRES_DB: megatroll_db
          POSTGRES_USER: megatroll
          POSTGRES_PASSWORD: "somepass"
          PGADMIN_DEFAULT_EMAIL: DroneSelfieAccess@gmail.com
          PGADMIN_DEFAULT_PASSWORD: "somepass"
          REDIS_HOST: redis
          REDIS_PORT: 6379
          APP_MONTAGE_PORT: 8006
          RAY_DASHBOARD_MONTAGE_PORT: ${{ env.RAY_DASHBOARD_MONTAGE_PORT }}
          RAY_MONTAGE_NUM_CPU: 3
          SORTER_CONVERTER_360_URL: http://api/api/v1/gopromax_360_convert
          TELEGRAM_BOT_TOKEN: ${{ secrets.TEST_TELEGRAM_BOT_TOKEN }}
          TELEGRAM_REG_BOT_TOKEN: ${{ env.TELEGRAM_REG_BOT_TOKEN }}
          TELEGRAM_SUPPORT_CHAT_ID: ${{ env.TELEGRAM_SUPPORT_CHAT_ID }}
          MASTER_EMAIL: pr@droneselfie.tech
          VIDEO_SOURCES_DIR: /mnt/goprosync/test_videos
          FINAL_VIDEO_PREFIX: sky-park-
          OUTPUT_VIDEO: video.mp4
          MOBILE_RESOLUTION: 720x480
          VIDEO_SPEED_RENDER_PRESET: fast
          DATABASE_URL: postgresql+psycopg2://megatroll:somepass@pg/megatroll_db
          S3_DISK_DIR: /mnt/goprosync/disk-s3/TEST_NEW_SERVICE
          SECRET_KEY: "123123123123123123123123123123123123123123123"
          API_PREFIX: /api/v1
          ORIGINS: http://localhost,http://localhost:3223
          MATCHING_VIDEO_TO_TICKET_DELTA: 3
          TIMING_PHOTOS: 16,20,22,25,30,40,45
          DEFAULT_DEVICES: '{"DroneZip":{"sn":"drone", "type": "share"},"GoproStart":{"sn":"C3461324923228", "type": "share"},"GoproBucket":{"sn":"C3461325039159", "type": "share"},"Drone": {"sn": "345345345", "type":"share"}}'
          PACKAGE_TYPES: gopro
          # 2gopro,drone+2gopro,gopro,drone,gopro+drone
          DICT_TYPES_PACKAGES: '{}'
          # '{"gopro+drone":{"use_individual_device":"True","share_devices":["DroneZip"]},"drone":{"use_individual_device":"True","share_devices":[]},"gopro":{"use_individual_device":"True","share_devices":[]},"2gopro":{"use_individual_device":"False","share_devices":["GoproStart","GoproBucket"]},"drone+2gopro":{"use_individual_device":"False","share_devices":["GoproStart","GoproBucket","Drone"]}}'
          SOURCE_TYPES: share,individual,intro,introfly_summer,logo,music,outro,droneout_summer,silent
          DEFAULT_SOURCES: '{"intro":"auxiliary_files/IntroMega.mp4","introfly_summer":"auxiliary_files/introfly_summer.mp4","logo":"auxiliary_files/Logos.png","music":"auxiliary_files/musicMega.mp3","outro":"auxiliary_files/OutroMega.mp4","droneout_summer":"auxiliary_files/droneout_summer.mp4","silent":"auxiliary_files/silent.mp3"}'
          AUTHENTICATION_URL: http://localhost${{ secrets.API_PREFIX }}/auth/login
          VIDEO2_URL: http://localhost${{ secrets.API_PREFIX }}/video2
          GET_DEVICES_LIST_URL: http://localhost${{ secrets.API_PREFIX }}/devices/
          UVICORN_WORKERS: 2
          DEBUG: "False"
          TIME_ZONE: 0
          GOPRO_CAMERA_COMMAND: ${{ env.GOPRO_CAMERA_COMMAND }}
          DEFAULT_LANG: ru
          POSTSALE: True
          TRIM_SOURCE: True
          USE_QR_IN_SOURCE: False
          DEFAULT_PACKAGETYPE: gopro
          SYSTEM_LOGO_STATIC_TYPE: system_logo
          LETTER_SERVER: "T"
          API_LOGIN: admin
          API_PASSWORD: "admin"
          AWS_ENDPOINT_URL:
          AWS_S3_BUCKET_NAME: drone-selfie-server-dev-1
          AWS_ACCESS_KEY_ID: ${{ secrets.TEST_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.TEST_AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: eu-west-1
          AWS_CLOUDFRONT_URL: https://drone-selfie-server-dev-1.s3.amazonaws.com/
          TEST_EMAIL: yaricp@gmail.com
          TEST_CAMERA_BUCKET: C3461325039159
          TEST_CAMERA_START: C3461324923228
          SMTP_SERVER: smtp.yandex.ru
          SMTP_SERVER_PORT: 587
          SMTP_SERVER_PASSWORD: ${{ secrets.TEST_SMTP_SERVER_PASSWORD }}
          MAIL_NAME_ATTRACTION: MegaTroll
          NAME_ATTRACTION: MegaTroll
          PERSONAL_CABINET_URL: http://192.168.195.246/api/v1
          PERSONAL_CABINET_AUTHENTICATION_URL: link-server
          PERSONAL_CABINET_LOGIN_URL: http://192.168.195.246/login?link=
          PERSONAL_CABINET_GET_ATTRACTIONS: attractions
          PERSONAL_CABINET_CREATE_TICKET: tickets
          CAMERAS: C3461325039159,C3461324923228
          VALIDATION_DURATION_RANGE: 10,600
          FFMPEG_THREADS: 6
          VIDEO_BITRATE: 15M
          CELERY_TASKS_RETRIES: 5
          CELERY_TASKS_COUNTDOWN: 1
          CELERYD_MAX_TASKS_PER_CHILD: 50
          JSON_PATH: /mnt/goprosync/json-data
          JSON_API_URL: https://manifest.skypark.dev.defa.ru/api/toe-tag/notification
          JSON_API_TOKEN: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwOi8vbG9jYWxob3N0OjgxL2FwaS9sb2dpbiIsImlhdCI6MTY2MDYyODg1MSwiZXhwIjoxNjYwNjMyNDUxLCJuYmYiOjE2NjA2Mjg4NTEsImp0aSI6Im4xRGVBTHI3eU1xQkg4YmUiLCJzdWIiOiI0IiwicHJ2IjoiMjNiZDVjODk0OWY2MDBhZGIzOWU3MDFjNDAwODcyZGI3YTU5NzZmNyJ9.MQdnWEY4Fcp_DASvDxbmKPWGzEhFiVH3fEqhX8HpLf8
          EMO_SHOW_BOXES: true
          EMO_BUCKET_CROP_Y: 55
          EMO_BUCKET_CROP_HEIGHT: 800
          EMO_BUCKET_CROP_X: 100
          EMO_BUCKET_CROP_WIDTH: 1750
          EMO_START_CROP_Y: 350
          EMO_START_CROP_HEIGHT: 350
          EMO_START_CROP_X: 550
          EMO_START_CROP_WIDTH: 650
          EMO_ZIP_CROP_Y: 50
          EMO_ZIP_CROP_HEIGHT: 1030
          EMO_ZIP_CROP_X: 50
          EMO_ZIP_CROP_WIDTH: 1870
          EMO_SIZE_FILTER_BOX: 70,150
          EMO_SEARCH_PERIOD: 0.5
          EMO_SEARCH_INTERVAL: 7
          EMO_VOLUME_EMOTION: 0.5
          EMO_PREVIEW_SIZE: 195,110
          SORTER_API_LOGIN: admin
          SORTER_API_PASSWORD: admin
          SORTER_DEBUG_API: "False"
          SORTER_AUTHENTICATION_URL: http://api/api/v1/auth/login
          SORTER_VIDEO2_URL: http://api/api/v1/video2
          SORTER_GET_DEVICES_LIST_URL: http://api/api/v1/devices/
          SORTER_GET_TYPES_LIST_URL: http://api/api/v1/sourcetypes
          TRASSIR_URL_SERVER: https://192.168.195.215:8080
          TRASSIR_USER: test
          TRASSIR_PASSWORD: test
          TRASSIR_SEARCH_VIDEO_DELTA: 8
          TRASSIR_NETWORK_TIMEOUT: 10
          TRASSIR_DOWNLOAD_WAIT_TIME: 10
          IPFS_SERVER_URI: https://droneselfie.storage.api2.merklebot.com
          IPFS_API_TOKEN: Fi59NlKWuYf5cLfzJyyTSuw0fxLs91KSFm0Ds32HCOXf9Fm3nlfruw1P4R1XxJRTS54GMEkKJib-9PngyuIAqQ
          IPFS_SERVER_TIMEOUT: 10
          IPFS_UPLOAD_TIMEOUT: 1800
          IPFS_NEEDS_UPLOAD: true
        run: |
          docker compose up -d;
          sleep 45;
          docker compose ps -a;
          docker compose logs api;
          sleep 60;
          docker compose logs montage;
          docker compose exec -T api ls -a /app;
          docker compose exec -T api ls -a /app/tests;
          docker compose exec -T api ls -a /app/tests/files;
          docker compose exec -T api poetry run pytest tests/api;
          docker compose down;
      #    - name: Run integration tests
      #        if: ${{ (steps.rest_api_changed.outputs.OUTPUT != '') }}
      #        env:
      #          NAME_IMAGE_API: ${{ env.REGISTRY }}/${{ env.COMPANY }}/${{ env.IMAGE_NAME_API }}:test
      #          NAME_IMAGE_NGINX: ${{ env.REGISTRY }}/${{ env.COMPANY }}/${{ env.IMAGE_NAME_NGINX }}:test
      #          NAME_IMAGE_CELERY: ${{ env.REGISTRY }}/${{ env.COMPANY }}/${{ env.IMAGE_NAME_CELERY }}:test
      #          POSTGRES_HOST: pg
      #          POSTGRES_DB: megatroll_db
      #          POSTGRES_USER: megatroll
      #          POSTGRES_PASSWORD: somepass
      #          PGADMIN_DEFAULT_EMAIL: DroneSelfieAccess@gmail.com
      #          PGADMIN_DEFAULT_PASSWORD: somepass
      #          TELEGRAM_BOT_TOKEN: ${{ secrets.TEST_TELEGRAM_BOT_TOKEN }}
      #          TELEGRAM_FLIGHT_CHAT_ID: ${{ secrets.TEST_TELEGRAM_FLIGHT_CHAT_ID }}
      #          MASTER_EMAIL: pr@droneselfie.tech
      #          SMTP_SERVER: smtp.yandex.ru
      #          SMTP_SERVER_PORT: 587
      #          SMTP_SERVER_PASSWORD: ${{ secrets.TEST_SMTP_SERVER_PASSWORD }}
      #          MAIL_NAME_ATTRACTION: MegaTroll
      #          VIDEO_SOURCES_DIR: /mnt/goprosync/test_videos
      #          DATABASE_URL: postgresql+psycopg2://megatroll:somepass@pg/megatroll_db
      #          S3_DISK_DIR: /mnt/goprosync/disk-s3/TEST_NEW_SERVICE
      #          SECRET_KEY: '123123123123123123123123123123123123123123123'
      #          API_PREFIX: /api/v1
      #          ORIGINS: http://localhost,http://localhost:3223
      #          MONTAGE_CALLBACK_URL: http://localhost${{ secrets.API_PREFIX }}/montage
      #          MATCHING_VIDEO_TO_TICKET_DELTA: 3
      #          TIMING_PHOTOS: 16,20,22,25,30,40,45
      #          AUTHENTICATION_URL: http://localhost${{ secrets.API_PREFIX }}/auth/login
      #          VIDEO2_URL: http://localhost${{ secrets.API_PREFIX }}/video2
      #          GET_DEVICES_LIST_URL: http://localhost${{ secrets.API_PREFIX }}/device
      #          UVICORN_WORKERS: 4
      #          DEBUG_API: 'False'
      #          INSTALL_DEV: 'true'
      #          LETTER_SERVER: 'T'
      #          API_LOGIN: admin
      #          API_PASSWORD: 'admin'
      #          S3_BUCKET: drone-selfie-server-dev-1
      #          AWS_ACCESS_KEY_ID: ${{ secrets.TEST_AWS_ACCESS_KEY_ID }}
      #          AWS_SECRET_ACCESS_KEY: ${{ secrets.TEST_AWS_SECRET_ACCESS_KEY }}
      #          AWS_DEFAULT_REGION: eu-west-1
      #          CLOUDFRONT_URL: https://drone-selfie-server-dev-1.s3.amazonaws.com/
      #          TEST_EMAIL: yaricp@gmail.com
      #          TEST_CAMERA_BUCKET: C3461325039159
      #          TEST_CAMERA_START: C3461324923228
      #          NAME_ATTRACTION: MegaTroll
      #          PERSONAL_CABINET_URL: https://mediachannel.skypark.ru/api/v1
      #          PERSONAL_CABINET_AUTHENTICATION_URL: link-server
      #          PERSONAL_CABINET_LOGIN_URL: https://mediachannel.skypark.ru/login?link=
      #          PERSONAL_CABINET_GET_ATTRACTIONS: attractions
      #          PERSONAL_CABINET_CREATE_TICKET: tickets
      #          CAMERAS: C3461325039159,C3461324923228
      #          INTRO: IntroMega.mp4
      #          INTRO_FLY: introfly_summer.mp4
      #          PNG_IMG: logosMega.png
      #          MUSIC: musicMega.mp3
      #          OUTRO: OutroMega.mp4
      #          DRONE_OUT: droneout_summer.mp4
      #          SILENT: silent.mp3
      #          MOBILE_RESOLUTION: 720x480
      #          VALIDATION_DURATION_RANGE: 10,600
      #          FFMPEG_THREADS: 6
      #          CELERY_TASKS_RETRIES: 5
      #          CELERY_TASKS_COUNTDOWN: 1
      #        run: |
      #          docker-compose up -d;
      #          docker-compose exec -T api pytest tests/integration
      
      - name: push image rest api if backend was changed
        if: ${{ (steps.rest_api_changed.outputs.OUTPUT != '') || (steps.docker_api_changes.outputs.OUTPUT != '') }}
        run: |
          docker push ${{ env.REGISTRY }}/${{ env.COMPANY }}/${{ env.IMAGE_NAME_API }}:test;
      - name: Run sorter build image and start unit tests 
        if: ${{ (steps.sorter_changes.outputs.OUTPUT != '') || (steps.docker_sorter_changes.outputs.OUTPUT != '')}}
        env:
          INSTALL_DEV: "True"
          NAME_IMAGE_REST_API_PACKAGES: ${{ env.REGISTRY }}/${{ env.COMPANY }}/rest_api_packages:test
          NAME_IMAGE_CELERY_PACKAGES: ${{ env.REGISTRY }}/${{ env.COMPANY }}/celery_packages:test
          NAME_IMAGE_API: ${{ env.REGISTRY }}/${{ env.COMPANY }}/${{ env.IMAGE_NAME_API }}:test
          NAME_IMAGE_CELERY: ${{ env.REGISTRY }}/${{ env.COMPANY }}/${{ env.IMAGE_NAME_CELERY }}:test
          NAME_IMAGE_FRONTEND: ${{ env.REGISTRY }}/${{ env.COMPANY }}/${{ env.IMAGE_NAME_FRONTEND }}:test
          NAME_IMAGE_SORTER: ${{ env.REGISTRY }}/${{ env.COMPANY }}/${{ env.IMAGE_NAME_SORTER }}:test
          NAME_IMAGE_TELEGRAM_BOT: ${{ env.REGISTRY }}/${{ env.COMPANY }}/${{ env.IMAGE_NAME_TELEGRAM_BOT }}:test
          POSTGRES_HOST: pg
          POSTGRES_DB: megatroll_db
          POSTGRES_USER: megatroll
          POSTGRES_PASSWORD: "somepass"
          PGADMIN_DEFAULT_EMAIL: DroneSelfieAccess@gmail.com
          PGADMIN_DEFAULT_PASSWORD: "somepass"
          REDIS_HOST: redis
          REDIS_PORT: 6379
          APP_MONTAGE_PORT: 8006
          APP_EMO_PORT: 8007
          RAY_DASHBOARD_EMO_PORT: ${{ env.RAY_DASHBOARD_EMO_PORT }}
          RAY_DASHBOARD_MONTAGE_PORT: ${{ env.RAY_DASHBOARD_MONTAGE_PORT }}
          TELEGRAM_BOT_TOKEN: ${{ secrets.TEST_TELEGRAM_BOT_TOKEN }}
          TELEGRAM_SUPPORT_CHAT_ID: ${{ env.TELEGRAM_SUPPORT_CHAT_ID }}
          MASTER_EMAIL: pr@droneselfie.tech
          VIDEO_SOURCES_DIR: /mnt/goprosync/test_videos
          FINAL_VIDEO_PREFIX: sky-park-
          OUTPUT_VIDEO: video.mp4
          MOBILE_RESOLUTION: 720x480
          VIDEO_SPEED_RENDER_PRESET: fast
          DATABASE_URL: postgresql+psycopg2://megatroll:somepass@pg/megatroll_db
          S3_DISK_DIR: /mnt/goprosync/disk-s3/TEST_NEW_SERVICE
          SECRET_KEY: "123123123123123123123123123123123123123123123"
          API_PREFIX: /api/v1
          ORIGINS: http://localhost,http://localhost:3223
          MATCHING_VIDEO_TO_TICKET_DELTA: 3
          TIMING_PHOTOS: 16,20,22,25,30,40,45
          DEFAULT_DEVICES: '{"DroneZip":{"sn":"drone", "type": "share"},"GoproStart":{"sn":"C3461324923228", "type": "share"},"GoproBucket":{"sn":"C3461325039159", "type": "share"},"Drone": {"sn": "345345345", "type":"share"}}'
          PACKAGE_TYPES: 2gopro,drone+2gopro,gopro,drone,gopro+drone
          DICT_TYPES_PACKAGES: '{"gopro+drone":{"use_individual_device":"True","share_devices":["DroneZip"]},"drone":{"use_individual_device":"True","share_devices":[]},"gopro":{"use_individual_device":"True","share_devices":[]},"2gopro":{"use_individual_device":"False","share_devices":["GoproStart","GoproBucket"]},"drone+2gopro":{"use_individual_device":"False","share_devices":["GoproStart","GoproBucket","Drone"]}}'
          SOURCE_TYPES: share,individual,intro,introfly_summer,logo,music,outro,droneout_summer,silent
          DEFAULT_SOURCES: '{"intro":"auxiliary_files/IntroMega.mp4","introfly_summer":"auxiliary_files/introfly_summer.mp4","logo":"auxiliary_files/Logos.png","music":"auxiliary_files/musicMega.mp3","outro":"auxiliary_files/OutroMega.mp4","droneout_summer":"auxiliary_files/droneout_summer.mp4","silent":"auxiliary_files/silent.mp3"}'
          AUTHENTICATION_URL: http://localhost${{ secrets.API_PREFIX }}/auth/login
          VIDEO2_URL: http://localhost${{ secrets.API_PREFIX }}/video2
          GET_DEVICES_LIST_URL: http://localhost${{ secrets.API_PREFIX }}/devices/
          UVICORN_WORKERS: 2
          DEBUG: "False"
          TIME_ZONE: 0
          POSTSALE: True
          SYSTEM_LOGO_STATIC_TYPE: system_logo
          LETTER_SERVER: "T"
          API_LOGIN: admin
          API_PASSWORD: "admin"
          AWS_ENDPOINT_URL:
          AWS_S3_BUCKET_NAME: drone-selfie-server-dev-1
          AWS_ACCESS_KEY_ID: ${{ secrets.TEST_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.TEST_AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: eu-west-1
          AWS_CLOUDFRONT_URL: https://drone-selfie-server-dev-1.s3.amazonaws.com/
          TEST_EMAIL: yaricp@gmail.com
          TEST_CAMERA_BUCKET: C3461325039159
          TEST_CAMERA_START: C3461324923228
          SMTP_SERVER: smtp.yandex.ru
          SMTP_SERVER_PORT: 587
          SMTP_SERVER_PASSWORD: ${{ secrets.TEST_SMTP_SERVER_PASSWORD }}
          MAIL_NAME_ATTRACTION: MegaTroll
          NAME_ATTRACTION: MegaTroll
          PERSONAL_CABINET_URL: http://192.168.195.246/api/v1
          PERSONAL_CABINET_AUTHENTICATION_URL: link-server
          PERSONAL_CABINET_LOGIN_URL: http://192.168.195.246/login?link=
          PERSONAL_CABINET_GET_ATTRACTIONS: attractions
          PERSONAL_CABINET_CREATE_TICKET: tickets
          CAMERAS: C3461325039159,C3461324923228
          VALIDATION_DURATION_RANGE: 10,600
          FFMPEG_THREADS: 6
          VIDEO_BITRATE: 15M
          CELERY_TASKS_RETRIES: 5
          CELERY_TASKS_COUNTDOWN: 1
          CELERYD_MAX_TASKS_PER_CHILD: 50
          JSON_PATH: /mnt/goprosync/json-data
          JSON_API_URL: https://manifest.skypark.dev.defa.ru/api/toe-tag/notification
          JSON_API_TOKEN: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwOi8vbG9jYWxob3N0OjgxL2FwaS9sb2dpbiIsImlhdCI6MTY2MDYyODg1MSwiZXhwIjoxNjYwNjMyNDUxLCJuYmYiOjE2NjA2Mjg4NTEsImp0aSI6Im4xRGVBTHI3eU1xQkg4YmUiLCJzdWIiOiI0IiwicHJ2IjoiMjNiZDVjODk0OWY2MDBhZGIzOWU3MDFjNDAwODcyZGI3YTU5NzZmNyJ9.MQdnWEY4Fcp_DASvDxbmKPWGzEhFiVH3fEqhX8HpLf8
          EMO_SHOW_BOXES: true
          EMO_BUCKET_CROP_Y: 55
          EMO_BUCKET_CROP_HEIGHT: 800
          EMO_BUCKET_CROP_X: 100
          EMO_BUCKET_CROP_WIDTH: 1750
          EMO_START_CROP_Y: 350
          EMO_START_CROP_HEIGHT: 350
          EMO_START_CROP_X: 550
          EMO_START_CROP_WIDTH: 650
          EMO_ZIP_CROP_Y: 50
          EMO_ZIP_CROP_HEIGHT: 1030
          EMO_ZIP_CROP_X: 50
          EMO_ZIP_CROP_WIDTH: 1870
          EMO_SIZE_FILTER_BOX: 70,150
          EMO_SEARCH_PERIOD: 0.5
          EMO_SEARCH_INTERVAL: 7
          EMO_VOLUME_EMOTION: 0.5
          EMO_PREVIEW_SIZE: 195,110
          SORTER_API_LOGIN: admin
          SORTER_API_PASSWORD: admin
          SORTER_DEBUG_API: "False"
          SORTER_AUTHENTICATION_URL: http://api/api/v1/auth/login
          SORTER_VIDEO2_URL: http://api/api/v1/video2
          SORTER_GET_DEVICES_LIST_URL: http://api/api/v1/devices/
          SORTER_GET_TYPES_LIST_URL: http://api/api/v1/sourcetypes
          TRASSIR_URL_SERVER: https://192.168.195.215:8080
          TRASSIR_USER: test
          TRASSIR_PASSWORD: test
          TRASSIR_SEARCH_VIDEO_DELTA: 8
          TRASSIR_NETWORK_TIMEOUT: 10
          TRASSIR_DOWNLOAD_WAIT_TIME: 10
          IPFS_SERVER_URI: https://droneselfie.storage.api2.merklebot.com
          IPFS_API_TOKEN: Fi59NlKWuYf5cLfzJyyTSuw0fxLs91KSFm0Ds32HCOXf9Fm3nlfruw1P4R1XxJRTS54GMEkKJib-9PngyuIAqQ
          IPFS_SERVER_TIMEOUT: 10
          IPFS_UPLOAD_TIMEOUT: 1800
          IPFS_NEEDS_UPLOAD: true
        run: |
          docker compose build sorter;
          # docker-compose run -d sorter;
          # docker-compose exec -T sorter pytest;
          # docker-compose down;
      - name: push image sorter if incoming_sorter was changed
        if: ${{ (steps.sorter_changes.outputs.OUTPUT != '') || (steps.docker_sorter_changes.outputs.OUTPUT != '')}}
        run: |
          docker push ${{ env.REGISTRY }}/${{ env.COMPANY }}/${{ env.IMAGE_NAME_SORTER }}:test;
      - name: Run montage build image if montage changed 
        if: ${{ (steps.montage_changes.outputs.OUTPUT != '') || (steps.docker_montage_changes.outputs.OUTPUT != '') }}
        env:
          INSTALL_DEV: "True"
          NAME_IMAGE_REST_API_PACKAGES: ${{ env.REGISTRY }}/${{ env.COMPANY }}/rest_api_packages:test
          NAME_IMAGE_MONTAGE_PACKAGES: ${{ env.REGISTRY }}/${{ env.COMPANY }}/{{ env.NAME_IMAGE_MONTAGE_PACKAGES }}:test
          NAME_IMAGE_API: ${{ env.REGISTRY }}/${{ env.COMPANY }}/${{ env.IMAGE_NAME_API }}:test
          NAME_IMAGE_RAY_MONTAGE: ${{ env.REGISTRY }}/${{ env.COMPANY }}/${{ env.IMAGE_NAME_RAY_MONTAGE }}:test
          NAME_IMAGE_RAY_EMOTIONS: ${{ env.REGISTRY }}/${{ env.COMPANY }}/${{ env.IMAGE_NAME_RAY_EMOTIONS }}:test
          NAME_IMAGE_FRONTEND: ${{ env.REGISTRY }}/${{ env.COMPANY }}/${{ env.IMAGE_NAME_FRONTEND }}:test
          NAME_IMAGE_SORTER: ${{ env.REGISTRY }}/${{ env.COMPANY }}/${{ env.IMAGE_NAME_SORTER }}:test
          NAME_IMAGE_TELEGRAM_BOT: ${{ env.REGISTRY }}/${{ env.COMPANY }}/${{ env.IMAGE_NAME_TELEGRAM_BOT }}:test
          POSTGRES_HOST: pg
          POSTGRES_DB: megatroll_db
          POSTGRES_USER: megatroll
          POSTGRES_PASSWORD: "somepass"
          PGADMIN_DEFAULT_EMAIL: DroneSelfieAccess@gmail.com
          PGADMIN_DEFAULT_PASSWORD: "somepass"
          REDIS_HOST: redis
          REDIS_PORT: 6379
          APP_MONTAGE_PORT: 8006
          APP_EMO_PORT: 8007
          RAY_DASHBOARD_EMO_PORT: ${{ env.RAY_DASHBOARD_EMO_PORT }}
          RAY_DASHBOARD_MONTAGE_PORT: ${{ env.RAY_DASHBOARD_MONTAGE_PORT }}
          TELEGRAM_BOT_TOKEN: ${{ secrets.TEST_TELEGRAM_BOT_TOKEN }}
          MASTER_EMAIL: pr@droneselfie.tech
          VIDEO_SOURCES_DIR: /mnt/goprosync/test_videos
          FINAL_VIDEO_PREFIX: sky-park-
          OUTPUT_VIDEO: video.mp4
          MOBILE_RESOLUTION: 720x480
          VIDEO_SPEED_RENDER_PRESET: fast
          DATABASE_URL: postgresql+psycopg2://megatroll:somepass@pg/megatroll_db
          S3_DISK_DIR: /mnt/goprosync/disk-s3/TEST_NEW_SERVICE
          SECRET_KEY: "123123123123123123123123123123123123123123123"
          API_PREFIX: /api/v1
          ORIGINS: http://localhost,http://localhost:3223
          MATCHING_VIDEO_TO_TICKET_DELTA: 3
          TIMING_PHOTOS: 16,20,22,25,30,40,45
          DEFAULT_DEVICES: '{"DroneZip":{"sn":"drone", "type": "share"},"GoproStart":{"sn":"C3461324923228", "type": "share"},"GoproBucket":{"sn":"C3461325039159", "type": "share"},"Drone": {"sn": "345345345", "type":"share"}}'
          PACKAGE_TYPES: 2gopro,drone+2gopro,gopro,drone,gopro+drone
          DICT_TYPES_PACKAGES: '{"gopro+drone":{"use_individual_device":"True","share_devices":["DroneZip"]},"drone":{"use_individual_device":"True","share_devices":[]},"gopro":{"use_individual_device":"True","share_devices":[]},"2gopro":{"use_individual_device":"False","share_devices":["GoproStart","GoproBucket"]},"drone+2gopro":{"use_individual_device":"False","share_devices":["GoproStart","GoproBucket","Drone"]}}'
          SOURCE_TYPES: share,individual,intro,introfly_summer,logo,music,outro,droneout_summer,silent
          DEFAULT_SOURCES: '{"intro":"auxiliary_files/IntroMega.mp4","introfly_summer":"auxiliary_files/introfly_summer.mp4","logo":"auxiliary_files/Logos.png","music":"auxiliary_files/musicMega.mp3","outro":"auxiliary_files/OutroMega.mp4","droneout_summer":"auxiliary_files/droneout_summer.mp4","silent":"auxiliary_files/silent.mp3"}'
          AUTHENTICATION_URL: http://localhost${{ secrets.API_PREFIX }}/auth/login
          VIDEO2_URL: http://localhost${{ secrets.API_PREFIX }}/video2
          GET_DEVICES_LIST_URL: http://localhost${{ secrets.API_PREFIX }}/devices/
          UVICORN_WORKERS: 2
          DEBUG: "False"
          TIME_ZONE: 0
          POSTSALE: True
          SYSTEM_LOGO_STATIC_TYPE: system_logo
          LETTER_SERVER: "T"
          API_LOGIN: admin
          API_PASSWORD: "admin"
          AWS_ENDPOINT_URL:
          AWS_S3_BUCKET_NAME: drone-selfie-server-dev-1
          AWS_ACCESS_KEY_ID: ${{ secrets.TEST_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.TEST_AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: eu-west-1
          AWS_CLOUDFRONT_URL: https://drone-selfie-server-dev-1.s3.amazonaws.com/
          TEST_EMAIL: yaricp@gmail.com
          TEST_CAMERA_BUCKET: C3461325039159
          TEST_CAMERA_START: C3461324923228
          SMTP_SERVER: smtp.yandex.ru
          SMTP_SERVER_PORT: 587
          SMTP_SERVER_PASSWORD: ${{ secrets.TEST_SMTP_SERVER_PASSWORD }}
          MAIL_NAME_ATTRACTION: MegaTroll
          NAME_ATTRACTION: MegaTroll
          PERSONAL_CABINET_URL: http://192.168.195.246/api/v1
          PERSONAL_CABINET_AUTHENTICATION_URL: link-server
          PERSONAL_CABINET_LOGIN_URL: http://192.168.195.246/login?link=
          PERSONAL_CABINET_GET_ATTRACTIONS: attractions
          PERSONAL_CABINET_CREATE_TICKET: tickets
          CAMERAS: C3461325039159,C3461324923228
          VALIDATION_DURATION_RANGE: 10,600
          FFMPEG_THREADS: 6
          VIDEO_BITRATE: 15M
          CELERY_TASKS_RETRIES: 5
          CELERY_TASKS_COUNTDOWN: 1
          CELERYD_MAX_TASKS_PER_CHILD: 50
          JSON_PATH: /mnt/goprosync/json-data
          JSON_API_URL: https://manifest.skypark.dev.defa.ru/api/toe-tag/notification
          JSON_API_TOKEN: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwOi8vbG9jYWxob3N0OjgxL2FwaS9sb2dpbiIsImlhdCI6MTY2MDYyODg1MSwiZXhwIjoxNjYwNjMyNDUxLCJuYmYiOjE2NjA2Mjg4NTEsImp0aSI6Im4xRGVBTHI3eU1xQkg4YmUiLCJzdWIiOiI0IiwicHJ2IjoiMjNiZDVjODk0OWY2MDBhZGIzOWU3MDFjNDAwODcyZGI3YTU5NzZmNyJ9.MQdnWEY4Fcp_DASvDxbmKPWGzEhFiVH3fEqhX8HpLf8
          EMO_SHOW_BOXES: true
          EMO_BUCKET_CROP_Y: 55
          EMO_BUCKET_CROP_HEIGHT: 800
          EMO_BUCKET_CROP_X: 100
          EMO_BUCKET_CROP_WIDTH: 1750
          EMO_START_CROP_Y: 350
          EMO_START_CROP_HEIGHT: 350
          EMO_START_CROP_X: 550
          EMO_START_CROP_WIDTH: 650
          EMO_ZIP_CROP_Y: 50
          EMO_ZIP_CROP_HEIGHT: 1030
          EMO_ZIP_CROP_X: 50
          EMO_ZIP_CROP_WIDTH: 1870
          EMO_SIZE_FILTER_BOX: 70,150
          EMO_SEARCH_PERIOD: 0.5
          EMO_SEARCH_INTERVAL: 7
          EMO_VOLUME_EMOTION: 0.5
          EMO_PREVIEW_SIZE: 195,110
          SORTER_API_LOGIN: admin
          SORTER_API_PASSWORD: admin
          SORTER_DEBUG_API: "False"
          SORTER_AUTHENTICATION_URL: http://api/api/v1/auth/login
          SORTER_VIDEO2_URL: http://api/api/v1/video2
          SORTER_GET_DEVICES_LIST_URL: http://api/api/v1/devices/
          SORTER_GET_TYPES_LIST_URL: http://api/api/v1/sourcetypes
          TRASSIR_URL_SERVER: https://192.168.195.215:8080
          TRASSIR_USER: test
          TRASSIR_PASSWORD: test
          TRASSIR_SEARCH_VIDEO_DELTA: 8
          TRASSIR_NETWORK_TIMEOUT: 10
          TRASSIR_DOWNLOAD_WAIT_TIME: 10
          IPFS_SERVER_URI: https://droneselfie.storage.api2.merklebot.com
          IPFS_API_TOKEN: Fi59NlKWuYf5cLfzJyyTSuw0fxLs91KSFm0Ds32HCOXf9Fm3nlfruw1P4R1XxJRTS54GMEkKJib-9PngyuIAqQ
          IPFS_SERVER_TIMEOUT: 10
          IPFS_UPLOAD_TIMEOUT: 1800
          IPFS_NEEDS_UPLOAD: true
        run: |
          docker compose build montage;
          docker push ${{ env.REGISTRY }}/${{ env.COMPANY }}/${{ env.IMAGE_NAME_RAY_MONTAGE }}:test;
      - name: Run tg_bot build image if telegram_bot changed 
        if: ${{ (steps.tg_changed.outputs.OUTPUT != '') }}
        env:
          INSTALL_DEV: "True"
          NAME_IMAGE_REST_API_PACKAGES: ${{ env.REGISTRY }}/${{ env.COMPANY }}/rest_api_packages:test
          NAME_IMAGE_MONTAGE_PACKAGES: ${{ env.REGISTRY }}/${{ env.COMPANY }}/{{ env.NAME_IMAGE_MONTAGE_PACKAGES }}:test
          NAME_IMAGE_API: ${{ env.REGISTRY }}/${{ env.COMPANY }}/${{ env.IMAGE_NAME_API }}:test
          NAME_IMAGE_RAY_EMOTIONS: ${{ env.REGISTRY }}/${{ env.COMPANY }}/${{ env.IMAGE_NAME_RAY_EMOTIONS }}:test
          NAME_IMAGE_RAY_MONTAGE: ${{ env.REGISTRY }}/${{ env.COMPANY }}/${{ env.IMAGE_NAME_RAY_MONTAGE }}:test
          NAME_IMAGE_FRONTEND: ${{ env.REGISTRY }}/${{ env.COMPANY }}/${{ env.IMAGE_NAME_FRONTEND }}:test
          NAME_IMAGE_SORTER: ${{ env.REGISTRY }}/${{ env.COMPANY }}/${{ env.IMAGE_NAME_SORTER }}:test
          NAME_IMAGE_TELEGRAM_BOT: ${{ env.REGISTRY }}/${{ env.COMPANY }}/${{ env.IMAGE_NAME_TELEGRAM_BOT }}:test
          POSTGRES_HOST: pg
          POSTGRES_DB: megatroll_db
          POSTGRES_USER: megatroll
          POSTGRES_PASSWORD: "somepass"
          PGADMIN_DEFAULT_EMAIL: DroneSelfieAccess@gmail.com
          PGADMIN_DEFAULT_PASSWORD: "somepass"
          REDIS_HOST: redis
          REDIS_PORT: 6379
          APP_MONTAGE_PORT: 8006
          APP_EMO_PORT: 8007
          RAY_DASHBOARD_EMO_PORT: ${{ env.RAY_DASHBOARD_EMO_PORT }}
          RAY_DASHBOARD_MONTAGE_PORT: ${{ env.RAY_DASHBOARD_MONTAGE_PORT }}
          TELEGRAM_BOT_TOKEN: ${{ secrets.TEST_TELEGRAM_BOT_TOKEN }}
          TELEGRAM_SUPPORT_CHAT_ID: ${{ env.TELEGRAM_SUPPORT_CHAT_ID }}
          MASTER_EMAIL: pr@droneselfie.tech
          VIDEO_SOURCES_DIR: /mnt/goprosync/test_videos
          FINAL_VIDEO_PREFIX: sky-park-
          OUTPUT_VIDEO: video.mp4
          MOBILE_RESOLUTION: 720x480
          VIDEO_SPEED_RENDER_PRESET: fast
          DATABASE_URL: postgresql+psycopg2://megatroll:somepass@pg/megatroll_db
          S3_DISK_DIR: /mnt/goprosync/disk-s3/TEST_NEW_SERVICE
          SECRET_KEY: "123123123123123123123123123123123123123123123"
          API_PREFIX: /api/v1
          ORIGINS: http://localhost,http://localhost:3223
          MATCHING_VIDEO_TO_TICKET_DELTA: 3
          TIMING_PHOTOS: 16,20,22,25,30,40,45
          DEFAULT_DEVICES: '{"DroneZip":{"sn":"drone", "type": "share"},"GoproStart":{"sn":"C3461324923228", "type": "share"},"GoproBucket":{"sn":"C3461325039159", "type": "share"},"Drone": {"sn": "345345345", "type":"share"}}'
          PACKAGE_TYPES: 2gopro,drone+2gopro,gopro,drone,gopro+drone
          DICT_TYPES_PACKAGES: '{"gopro+drone":{"use_individual_device":"True","share_devices":["DroneZip"]},"drone":{"use_individual_device":"True","share_devices":[]},"gopro":{"use_individual_device":"True","share_devices":[]},"2gopro":{"use_individual_device":"False","share_devices":["GoproStart","GoproBucket"]},"drone+2gopro":{"use_individual_device":"False","share_devices":["GoproStart","GoproBucket","Drone"]}}'
          SOURCE_TYPES: share,individual,intro,introfly_summer,logo,music,outro,droneout_summer,silent
          DEFAULT_SOURCES: '{"intro":"auxiliary_files/IntroMega.mp4","introfly_summer":"auxiliary_files/introfly_summer.mp4","logo":"auxiliary_files/Logos.png","music":"auxiliary_files/musicMega.mp3","outro":"auxiliary_files/OutroMega.mp4","droneout_summer":"auxiliary_files/droneout_summer.mp4","silent":"auxiliary_files/silent.mp3"}'
          AUTHENTICATION_URL: http://localhost${{ secrets.API_PREFIX }}/auth/login
          VIDEO2_URL: http://localhost${{ secrets.API_PREFIX }}/video2
          GET_DEVICES_LIST_URL: http://localhost${{ secrets.API_PREFIX }}/devices/
          UVICORN_WORKERS: 2
          DEBUG: "False"
          TIME_ZONE: 0
          POSTSALE: True
          SYSTEM_LOGO_STATIC_TYPE: system_logo
          LETTER_SERVER: "T"
          API_LOGIN: admin
          API_PASSWORD: "admin"
          AWS_ENDPOINT_URL:
          AWS_S3_BUCKET_NAME: drone-selfie-server-dev-1
          AWS_ACCESS_KEY_ID: ${{ secrets.TEST_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.TEST_AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: eu-west-1
          AWS_CLOUDFRONT_URL: https://drone-selfie-server-dev-1.s3.amazonaws.com/
          TEST_EMAIL: yaricp@gmail.com
          TEST_CAMERA_BUCKET: C3461325039159
          TEST_CAMERA_START: C3461324923228
          SMTP_SERVER: smtp.yandex.ru
          SMTP_SERVER_PORT: 587
          SMTP_SERVER_PASSWORD: ${{ secrets.TEST_SMTP_SERVER_PASSWORD }}
          MAIL_NAME_ATTRACTION: MegaTroll
          NAME_ATTRACTION: MegaTroll
          PERSONAL_CABINET_URL: http://192.168.195.246/api/v1
          PERSONAL_CABINET_AUTHENTICATION_URL: link-server
          PERSONAL_CABINET_LOGIN_URL: http://192.168.195.246/login?link=
          PERSONAL_CABINET_GET_ATTRACTIONS: attractions
          PERSONAL_CABINET_CREATE_TICKET: tickets
          CAMERAS: C3461325039159,C3461324923228
          VALIDATION_DURATION_RANGE: 10,600
          FFMPEG_THREADS: 6
          VIDEO_BITRATE: 15M
          CELERY_TASKS_RETRIES: 5
          CELERY_TASKS_COUNTDOWN: 1
          CELERYD_MAX_TASKS_PER_CHILD: 50
          JSON_PATH: /mnt/goprosync/json-data
          JSON_API_URL: https://manifest.skypark.dev.defa.ru/api/toe-tag/notification
          JSON_API_TOKEN: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwOi8vbG9jYWxob3N0OjgxL2FwaS9sb2dpbiIsImlhdCI6MTY2MDYyODg1MSwiZXhwIjoxNjYwNjMyNDUxLCJuYmYiOjE2NjA2Mjg4NTEsImp0aSI6Im4xRGVBTHI3eU1xQkg4YmUiLCJzdWIiOiI0IiwicHJ2IjoiMjNiZDVjODk0OWY2MDBhZGIzOWU3MDFjNDAwODcyZGI3YTU5NzZmNyJ9.MQdnWEY4Fcp_DASvDxbmKPWGzEhFiVH3fEqhX8HpLf8
          EMO_SHOW_BOXES: true
          EMO_BUCKET_CROP_Y: 55
          EMO_BUCKET_CROP_HEIGHT: 800
          EMO_BUCKET_CROP_X: 100
          EMO_BUCKET_CROP_WIDTH: 1750
          EMO_START_CROP_Y: 350
          EMO_START_CROP_HEIGHT: 350
          EMO_START_CROP_X: 550
          EMO_START_CROP_WIDTH: 650
          EMO_ZIP_CROP_Y: 50
          EMO_ZIP_CROP_HEIGHT: 1030
          EMO_ZIP_CROP_X: 50
          EMO_ZIP_CROP_WIDTH: 1870
          EMO_SIZE_FILTER_BOX: 70,150
          EMO_SEARCH_PERIOD: 0.5
          EMO_SEARCH_INTERVAL: 7
          EMO_VOLUME_EMOTION: 0.5
          EMO_PREVIEW_SIZE: 195,110
          SORTER_API_LOGIN: admin
          SORTER_API_PASSWORD: admin
          SORTER_DEBUG_API: "False"
          SORTER_AUTHENTICATION_URL: http://api/api/v1/auth/login
          SORTER_VIDEO2_URL: http://api/api/v1/video2
          SORTER_GET_DEVICES_LIST_URL: http://api/api/v1/devices/
          SORTER_GET_TYPES_LIST_URL: http://api/api/v1/sourcetypes
          TRASSIR_URL_SERVER: https://192.168.195.215:8080
          TRASSIR_USER: test
          TRASSIR_PASSWORD: test
          TRASSIR_SEARCH_VIDEO_DELTA: 8
          TRASSIR_NETWORK_TIMEOUT: 10
          TRASSIR_DOWNLOAD_WAIT_TIME: 10
          IPFS_SERVER_URI: https://droneselfie.storage.api2.merklebot.com
          IPFS_API_TOKEN: Fi59NlKWuYf5cLfzJyyTSuw0fxLs91KSFm0Ds32HCOXf9Fm3nlfruw1P4R1XxJRTS54GMEkKJib-9PngyuIAqQ
          IPFS_SERVER_TIMEOUT: 10
          IPFS_UPLOAD_TIMEOUT: 1800
          IPFS_NEEDS_UPLOAD: true
        run: |
          docker compose build tg;
          docker push ${{ env.REGISTRY }}/${{ env.COMPANY }}/${{ env.IMAGE_NAME_TELEGRAM_BOT }}:test;
      - name: Run trassir_client build image if trassir_client changed 
        if: ${{ (steps.trassir_changed.outputs.OUTPUT != '') }}
        env:
          INSTALL_DEV: "True"
          NAME_IMAGE_FRONTEND: ${{ env.REGISTRY }}/${{ env.COMPANY }}/${{ env.IMAGE_NAME_FRONTEND }}:test
          NAME_IMAGE_TRASSIR_CLIENT: ${{ env.REGISTRY }}/${{ env.COMPANY }}/${{ env.IMAGE_NAME_TRASSIR_CLIENT }}:test
        run: |
          docker compose build trassir;
          docker push ${{ env.REGISTRY }}/${{ env.COMPANY }}/${{ env.IMAGE_NAME_TRASSIR_CLIENT }}:test;

  deploy-test-server:
    needs: test-build-images
    runs-on: backend-test-server
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 2
      - name: Prepare folders and configs
        run: |
          mkdir -p /home/githubrunner/docker-compose-area/test/grafana
          mkdir -p /home/githubrunner/docker-compose-area/test/prometheus
          cp backend/grafana/* /home/githubrunner/docker-compose-area/test/grafana
          cp backend/prometheus/* /home/githubrunner/docker-compose-area/test/prometheus
      - name: Copy docker files to work folder
        run: cp test-docker-compose.yml /home/githubrunner/docker-compose-area/test/docker-compose.yml
      - name: Check changes in backend/rest_api
        id: rest_api_changed
        run: |
          OUTPUT=$( git diff HEAD\^ HEAD -- backend/rest_api | tail -1) &&
          echo "::set-output name=OUTPUT::$OUTPUT"
      - name: Check changes in backend/montage
        id: montage_changed
        run: |
          OUTPUT=$( git diff HEAD\^ HEAD -- backend/montage | tail -1) &&
          echo "::set-output name=OUTPUT::$OUTPUT"
      - name: Log in to the Container registry
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.PAT_RUNNER }}
      - name: pull latest packages images
        run: |
          docker pull ${{ env.REGISTRY }}/${{ env.COMPANY }}/${{ env.NAME_IMAGE_REST_API_PACKAGES }}:test;
          #  pull ${{ env.REGISTRY }}/${{ env.COMPANY }}/${{ env.NAME_IMAGE_CELERY_FER }}:last;
          docker pull ${{ env.REGISTRY }}/${{ env.COMPANY }}/${{ env.NAME_IMAGE_MONTAGE_PACKAGES }}:test;
      - name: delete old previous images
        run: |
          docker rmi ${{ env.REGISTRY }}/${{ env.COMPANY }}/${{ env.IMAGE_NAME_API }}:test_prev;
          docker rmi ${{ env.REGISTRY }}/${{ env.COMPANY }}/${{ env.IMAGE_NAME_RAY_MONTAGE }}:test_prev;
          docker rmi ${{ env.REGISTRY }}/${{ env.COMPANY }}/${{ env.IMAGE_NAME_SORTER }}:test_prev;
          docker rmi ${{ env.REGISTRY }}/${{ env.COMPANY }}/${{ env.IMAGE_NAME_TELEGRAM_BOT }}:test_prev;
          docker rmi ${{ env.REGISTRY }}/${{ env.COMPANY }}/${{ env.IMAGE_NAME_TRASSIR_CLIENT }}:test_prev;
      - name: make tag to old stable version images
        run: |
          docker tag ${{ env.REGISTRY }}/${{ env.COMPANY }}/${{ env.IMAGE_NAME_API }}:test ${{ env.REGISTRY }}/${{ env.COMPANY }}/${{ env.IMAGE_NAME_API }}:test_prev;
          docker tag ${{ env.REGISTRY }}/${{ env.COMPANY }}/${{ env.IMAGE_NAME_RAY_MONTAGE }}:test ${{ env.REGISTRY }}/${{ env.COMPANY }}/${{ env.IMAGE_NAME_RAY_MONTAGE }}:test_prev;
          docker tag ${{ env.REGISTRY }}/${{ env.COMPANY }}/${{ env.IMAGE_NAME_SORTER }}:test ${{ env.REGISTRY }}/${{ env.COMPANY }}/${{ env.IMAGE_NAME_SORTER }}:test_prev;
          docker tag ${{ env.REGISTRY }}/${{ env.COMPANY }}/${{ env.IMAGE_NAME_TELEGRAM_BOT }}:test ${{ env.REGISTRY }}/${{ env.COMPANY }}/${{ env.IMAGE_NAME_TELEGRAM_BOT }}:test_prev;
          docker tag ${{ env.REGISTRY }}/${{ env.COMPANY }}/${{ env.IMAGE_NAME_TRASSIR_CLIENT }}:test ${{ env.REGISTRY }}/${{ env.COMPANY }}/${{ env.IMAGE_NAME_TRASSIR_CLIENT }}:test_prev;
      - name: Pull new images
        env:
          NAME_IMAGE_API: ${{ env.REGISTRY }}/${{ env.COMPANY }}/${{ env.IMAGE_NAME_API }}:test
          NAME_IMAGE_RAY_MONTAGE: ${{ env.REGISTRY }}/${{ env.COMPANY }}/${{ env.IMAGE_NAME_RAY_MONTAGE }}:test
          NAME_IMAGE_FRONTEND: ${{ env.REGISTRY }}/${{ env.COMPANY }}/${{ env.IMAGE_NAME_FRONTEND }}:test
          NAME_IMAGE_SORTER: ${{ env.REGISTRY }}/${{ env.COMPANY }}/${{ env.IMAGE_NAME_SORTER }}:test
          NAME_IMAGE_TELEGRAM_BOT: ${{ env.REGISTRY }}/${{ env.COMPANY }}/${{ env.IMAGE_NAME_TELEGRAM_BOT }}:test
          NAME_IMAGE_TRASSIR_CLIENT: ${{ env.REGISTRY }}/${{ env.COMPANY }}/${{ env.IMAGE_NAME_TRASSIR_CLIENT }}:test
        run: |
          cd /home/githubrunner/docker-compose-area/test;
          docker-compose pull sorter;
          docker-compose pull api;
          docker-compose pull montage;
          docker-compose pull tg;
          docker-compose pull trassir;
      - name: Stop old images
        run: cd /home/githubrunner/docker-compose-area/test && docker-compose down
      - name: start new images
        env:
          NAME_IMAGE_API: ${{ env.REGISTRY }}/${{ env.COMPANY }}/${{ env.IMAGE_NAME_API }}:test
          NAME_IMAGE_RAY_MONTAGE: ${{ env.REGISTRY }}/${{ env.COMPANY }}/${{ env.IMAGE_NAME_RAY_MONTAGE }}:test
          NAME_IMAGE_FRONTEND: ${{ env.REGISTRY }}/${{ env.COMPANY }}/${{ env.IMAGE_NAME_FRONTEND }}:test
          NAME_IMAGE_SORTER: ${{ env.REGISTRY }}/${{ env.COMPANY }}/${{ env.IMAGE_NAME_SORTER }}:test
          NAME_IMAGE_TELEGRAM_BOT: ${{ env.REGISTRY }}/${{ env.COMPANY }}/${{ env.IMAGE_NAME_TELEGRAM_BOT }}:test
          NAME_IMAGE_TRASSIR_CLIENT: ${{ env.REGISTRY }}/${{ env.COMPANY }}/${{ env.IMAGE_NAME_TRASSIR_CLIENT }}:test
          VERSION: ${{ env.VERSION }}
          RESOURCE_NUM_CPU_PG: ${{ env.RESOURCE_NUM_CPU_PG }}
          RESOURCE_MEMORY_PG: ${{ env.RESOURCE_MEMORY_PG }}
          RESOURCE_NUM_CPU_API: ${{ env.RESOURCE_NUM_CPU_API }}
          RESOURCE_MEMORY_API: ${{ env.RESOURCE_MEMORY_API }}
          RESOURCE_NUM_CPU_SORTER: ${{ env.RESOURCE_NUM_CPU_SORTER }}
          RESOURCE_MEMORY_SORTER: ${{ env.RESOURCE_MEMORY_SORTER }}
          RESOURCE_NUM_CPU_REDIS: ${{ env.RESOURCE_NUM_CPU_REDIS }}
          RESOURCE_MEMORY_REDIS: ${{ env.RESOURCE_MEMORY_REDIS }}
          RESOURCE_NUM_CPU_TG: ${{ env.RESOURCE_NUM_CPU_TG }}
          RESOURCE_MEMORY_TG: ${{ env.RESOURCE_MEMORY_TG }}
          RESOURCE_NUM_CPU_PGADMIN: ${{ env.RESOURCE_NUM_CPU_PGADMIN }}
          RESOURCE_MEMORY_PGADMIN: ${{ env.RESOURCE_MEMORY_PGADMIN }}
          RESOURCE_NUM_CPU_FRONTEND: ${{ env.RESOURCE_NUM_CPU_FRONTEND }}
          RESOURCE_MEMORY_FRONTEND: ${{ env.RESOURCE_MEMORY_FRONTEND }}
          RESOURCE_NUM_CPU_RAY_MONTAGE: ${{ env.RESOURCE_NUM_CPU_RAY_MONTAGE }}
          RESOURCE_MEMORY_RAY_MONTAGE: ${{ env.RESOURCE_MEMORY_RAY_MONTAGE }}
          RAY_MONTAGE_DEFAULT_COUNT_ACTORS: ${{ env.RAY_MONTAGE_DEFAULT_COUNT_ACTORS }}
          POSTGRES_HOST: pg
          POSTGRES_DB: megatroll_db
          POSTGRES_USER: megatroll
          POSTGRES_PASSWORD: somepass
          PGADMIN_DEFAULT_EMAIL: DroneSelfieAccess@gmail.com
          PGADMIN_DEFAULT_PASSWORD: somepass
          REDIS_HOST: redis
          REDIS_PORT: 6379
          APP_MONTAGE_PORT: 8006
          RAY_DASHBOARD_MONTAGE_PORT: ${{ env.RAY_DASHBOARD_MONTAGE_PORT }}
          TELEGRAM_BOT_TOKEN: ${{ secrets.TEST_TELEGRAM_BOT_TOKEN }}
          TELEGRAM_FLIGHT_CHAT_ID: ${{ secrets.TEST_TELEGRAM_FLIGHT_CHAT_ID }}
          TELEGRAM_REG_BOT_TOKEN : ${{ env.TELEGRAM_REG_BOT_TOKEN }}
          TELEGRAM_REG_BOT_READY_MESSAGE: "test messaage"
          TELEGRAM_SUPPORT_CHAT_ID: ${{ env.TELEGRAM_SUPPORT_CHAT_ID }}
          GOPRO_CAMERA_COMMAND: ${{ env.GOPRO_CAMERA_COMMAND }}
          MASTER_EMAIL: pr@droneselfie.tech
          SMTP_SERVER: smtp.yandex.ru
          SMTP_SERVER_PORT: 587
          SMTP_SERVER_PASSWORD: ${{ secrets.TEST_SMTP_SERVER_PASSWORD }}
          MAIL_NAME_ATTRACTION: MegaTroll
          VIDEO_SOURCES_DIR: /mnt/goprosync/test_videos
          STATIC_SOURCES_DIR: /mnt/goprosync/auxiliary_files
          FINAL_VIDEO_PREFIX: sky-park-
          OUTPUT_VIDEO: video.mp4
          MOBILE_RESOLUTION: 720x480
          VIDEO_SPEED_RENDER_PRESET: fast
          DATABASE_URL: postgresql+psycopg2://megatroll:somepass@pg/megatroll_db
          S3_DISK_DIR: /mnt/goprosync/disk-s3/TEST_NEW_SERVICE
          SECRET_KEY: "123123123123123123123123123123123123123123123"
          API_PREFIX: /api/v1
          ORIGINS: http://localhost:8080,https://192.168.195.205,http://192.168.195.205
          MATCHING_VIDEO_TO_TICKET_DELTA: 3
          DEFAULT_DEVICES: '{"DroneZip":{"sn":"678567345", "type": "share"},"GoproStart":{"sn":"C3461324923228", "type": "share"},"GoproBucket":{"sn":"C3461325039159", "type": "share"},"DroneMega": {"sn": "345345345", "type":"share"}}'
          PACKAGE_TYPES: 2gopro,drone+2gopro,gopro,drone,drone+gopro
          DICT_TYPES_PACKAGES: '{"gopro+drone":{"use_individual_device":"True","share_devices":["DroneZip"]},"drone":{"use_individual_device":"False","share_devices":["DroneZip"]},"gopro":{"use_individual_device":"True","share_devices":[]},"2gopro":{"use_individual_device":"False","share_devices":["GoproStart","GoproBucket"]},"drone+2gopro":{"use_individual_device":"False","share_devices":["GoproStart","GoproBucket","DroneMega"]}}'
          SOURCE_TYPES: share,individual,intro,introfly_summer,logo,music,outro,droneout_summer,silent,intro_fly
          DEFAULT_SOURCES: '{"intro":"/mnt/goprosync/auxiliary_files/IntroMega.mp4","introfly_summer":"/mnt/goprosync/auxiliary_files/introfly_summer.mp4","logo":"/mnt/goprosync/auxiliary_files/Logos.png","music":"/mnt/goprosync/auxiliary_files/musicMega.mp3","outro":"/mnt/goprosync/auxiliary_files/OutroMega.mp4","droneout_summer":"/mnt/goprosync/auxiliary_files/droneout_summer.mp4","silent":"/mnt/goprosync/auxiliary_files/silent.mp3","intro_fly":"/mnt/goprosync/auxiliary_files/introfly_summer.mp4","drone_out":"/mnt/goprosync/auxiliary_files/droneout_summer.mp4"}'
          AUTHENTICATION_URL: http://localhost/api/v1/auth/login
          VIDEO2_URL: http://localhost/api/v1/video2
          GET_DEVICES_LIST_URL: http://localhost/api/v1/devices/
          UVICORN_WORKERS: 2
          DEBUG: "False"
          REST_API_TIMEOUT: 5
          TIME_ZONE: 0
          DEFAULT_LANG: ru
          POSTSALE: True
          TRIM_SOURCE: True
          USE_QR_IN_SOURCE: True
          DEFAULT_PACKAGETYPE: gopro
          SYSTEM_LOGO_STATIC_TYPE: system_logo
          INSTALL_DEV: "false"
          LETTER_SERVER: "T"
          API_LOGIN: admin
          API_PASSWORD: "admin"
          AWS_S3_BUCKET_NAME: drone-selfie-server-dev-1
          AWS_ACCESS_KEY_ID: ${{ secrets.TEST_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.TEST_AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: eu-west-1
          AWS_CLOUDFRONT_URL: https://drone-selfie-server-dev-1.s3.amazonaws.com/
          TEST_EMAIL: yaricp@gmail.com
          TEST_CAMERA_BUCKET: C3461325039159
          TEST_CAMERA_START: C3461324923228
          CAMERAS: C3461325039159,C3461324923228
          NAME_ATTRACTION: MegaTroll
          PERSONAL_CABINET_URL: http://192.168.195.205:85/api/v1
          PERSONAL_CABINET_AUTHENTICATION_URL: link-server
          PERSONAL_CABINET_LOGIN_URL: http://192.168.195.205:85/login?link=
          PERSONAL_CABINET_GET_ATTRACTIONS: attractions
          PERSONAL_CABINET_CREATE_TICKET: tickets
          VALIDATION_DURATION_RANGE: 10,3600
          FFMPEG_THREADS: 3
          VIDEO_BITRATE: 15M
          JSON_PATH: /mnt/goprosync/json-data
          JSON_API_URL: https://manifest.skypark.dev.defa.ru/api/toe-tag/notification
          JSON_API_TOKEN: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwOi8vbG9jYWxob3N0OjgxL2FwaS9sb2dpbiIsImlhdCI6MTY2MDYyODg1MSwiZXhwIjoxNjYwNjMyNDUxLCJuYmYiOjE2NjA2Mjg4NTEsImp0aSI6Im4xRGVBTHI3eU1xQkg4YmUiLCJzdWIiOiI0IiwicHJ2IjoiMjNiZDVjODk0OWY2MDBhZGIzOWU3MDFjNDAwODcyZGI3YTU5NzZmNyJ9.MQdnWEY4Fcp_DASvDxbmKPWGzEhFiVH3fEqhX8HpLf8
          DICT_RESOURCES_FOR_ACTORS_AND_TASKS: '{"RayActorMediaPackageCreator": {"memory": 250, "cpu": 0.25}, "task_download_video_trassir": {"memory": 1200, "cpu": 0.25}, "task_gopromax360_convert": {"memory": 300, "cpu": 0.25}, "task_load_files_to_s3": {"memory": 1500, "cpu": 0.25}, "task_montage_video": {"memory": 2000, "cpu": 2}, "task_search_emotion": {"memory": 3500, "cpu": 2}, "task_search_qr_in_video": {"memory": 250, "cpu": 0.25}, "task_change_status_package_in_dashboard": {"memory": 260, "cpu": 0.1}}'
          EMO_SHOW_BOXES: true
          EMO_BUCKET_CROP_Y: 55
          EMO_BUCKET_CROP_HEIGHT: 800
          EMO_BUCKET_CROP_X: 100
          EMO_BUCKET_CROP_WIDTH: 1750
          EMO_START_CROP_Y: 350
          EMO_START_CROP_HEIGHT: 350
          EMO_START_CROP_X: 550
          EMO_START_CROP_WIDTH: 650
          EMO_ZIP_CROP_Y: 50
          EMO_ZIP_CROP_HEIGHT: 1030
          EMO_ZIP_CROP_X: 50
          EMO_ZIP_CROP_WIDTH: 1870
          EMO_SIZE_FILTER_BOX: 70,150
          EMO_SEARCH_PERIOD: 0.5
          EMO_SEARCH_INTERVAL: 7
          EMO_VOLUME_EMOTION: 0.5
          EMO_PREVIEW_SIZE: 195,110
          SORTER_API_LOGIN: admin
          SORTER_API_PASSWORD: admin
          SORTER_DEBUG_API: "False"
          SORTER_AUTHENTICATION_URL: http://api/api/v1/auth/login
          SORTER_VIDEO2_URL: http://api/api/v1/video2
          SORTER_GET_DEVICES_LIST_URL: http://api/api/v1/devices/
          SORTER_GET_TYPES_LIST_URL: http://api/api/v1/sourcetypes
          SORTER_CONVERTER_360_URL: http://api/api/v1/gopromax_360_convert
          TRASSIR_URL_SERVER: https://192.168.195.215:8080
          TRASSIR_USER: test
          TRASSIR_PASSWORD: test
          TRASSIR_SEARCH_VIDEO_DELTA: 8
          TRASSIR_NETWORK_TIMEOUT: 10
          TRASSIR_DOWNLOAD_WAIT_TIME: 10
          IPFS_SERVER_URI: https://droneselfie.storage.api2.merklebot.com
          IPFS_API_TOKEN: Fi59NlKWuYf5cLfzJyyTSuw0fxLs91KSFm0Ds32HCOXf9Fm3nlfruw1P4R1XxJRTS54GMEkKJib-9PngyuIAqQ
          IPFS_SERVER_TIMEOUT: 10
          IPFS_UPLOAD_TIMEOUT: 1800
          IPFS_NEEDS_UPLOAD: true
        run: cd /home/githubrunner/docker-compose-area/test && docker-compose up -d
      - name: Sync .env file
        run: |
          cd /home/githubrunner/docker-compose-area/test;
          var=$(docker-compose exec -T api env);
          mv .env .env_old;
          echo "$var" > .env;
          var=$(docker-compose exec -T pg env);
          echo "$var" >> .env;
          var=$(docker-compose exec -T pgadmin4 env);
          echo "$var" >> .env;
          var=$(docker-compose exec -T montage env);
          echo "$var" >> .env;
          var=$(docker-compose exec -T sorter env);
          echo "$var" >> .env;
          var=$(docker-compose exec -T tg env);
          echo "$var" >> .env;
          var=$(docker-compose exec -T trassir env);
          echo "$var" >> .env;
          var=$(docker-compose exec -T frontend env);
          echo "$var" >> .env;
          var=$(docker-compose exec -T redis env);
          echo "$var" >> .env;
          echo -e "NAME_IMAGE_API=${{ env.REGISTRY }}/${{ env.COMPANY }}/${{ env.IMAGE_NAME_API }}:test" >> .env;
          echo -e "NAME_IMAGE_RAY_MONTAGE=${{ env.REGISTRY }}/${{ env.COMPANY }}/${{ env.IMAGE_NAME_RAY_MONTAGE }}:test" >> .env;
          echo -e "NAME_IMAGE_FRONTEND=${{ env.REGISTRY }}/${{ env.COMPANY }}/${{ env.IMAGE_NAME_FRONTEND }}:test" >> .env;
          echo -e "NAME_IMAGE_SORTER=${{ env.REGISTRY }}/${{ env.COMPANY }}/${{ env.IMAGE_NAME_SORTER }}:test" >> .env;
          echo -e "NAME_IMAGE_TELEGRAM_BOT=${{ env.REGISTRY }}/${{ env.COMPANY }}/${{ env.IMAGE_NAME_TELEGRAM_BOT }}:test" >> .env;
      - name: Create test customer
        run: |
          sleep 15;
          cd /home/githubrunner/docker-compose-area/test;
          docker-compose exec -T api poetry run python3 -c "from database import db_session as db; from tests.utils.customer import create_random_customer; create_random_customer(db);"
