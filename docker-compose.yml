# version: "3.9"


services:
  pg:
    restart: always
    # image: postgis/postgis:latest
    image: postgres:latest 
    volumes:
      - pgdata:/var/lib/postgresql/data/
    environment:
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}

  pgadmin4:
    image: dpage/pgadmin4:latest
    restart: always
    ports:
      - "5050:80"
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
    depends_on:
      - pg

  api:
    restart: always
    image: ${NAME_IMAGE_API}
    ports:
      - "8080:80"
    volumes:
      - ./backend/rest_api:/backend
      - ./backend/rest_api/alembic:/alembic
    build:
      context: ./backend/rest_api/
      dockerfile: Dockerfile
    env_file:
      - .env
    command: /./start.sh
    depends_on:
      - pg


  # - redis

  # tg:
  #   restart: always
  #   image: ${NAME_IMAGE_TELEGRAM_BOT}
  #   container_name: tg
  #   # volumes:
  #   #  - ./backend/telegram_bot/logs:/app/logs
  #   environment:
  #     REST_API_URI: "http://api/api/v1/"
  #     REST_API_TICKET: "tickets/"
  #     REST_API_DEVICE: "devices/"
  #     REST_API_SETTING: "settings/"
  #     REST_API_TYPESOURCE: "sourcetypes/"
  #     REST_API_SOURCE: "sources/"
  #     REST_API_SOURCE_BY_TYPESOURCE: "sources/by_typesource/"
  #     REST_API_IPFSUSER: "ipfsusers/"
  #     REST_API_IPFSUSER_BY_CUSTOMER: "ipfsusers/by_customer/"
  #     REST_API_TYPEPACKAGE: "packagetypes/"
  #     REST_API_MONTAGE: "montages/"
  #     REST_API_VIDEOMANAGER: "video-manager"
  #     REST_API_AUTHENTICATION_URL: "auth/login"
  #     REST_API_USER: ${API_LOGIN}
  #     REST_API_PASSWORD: ${API_PASSWORD}
  #     REST_API_CUSTOMER: "customer"
  #     REST_API_TIMEOUT: 5
  #   depends_on:
  #     - api
  #     - montage
  #   build:
  #     context: ./backend/tg_bot

  # redis:
  #   image: bitnami/redis:latest
  #   restart: always
  #   environment:
  #     ALLOW_EMPTY_PASSWORD: "true"

  # cadvisor:
  #   restart: always
  #   image: gcr.io/cadvisor/cadvisor
  #   container_name: cadvisor
  #   volumes:
  #     - /var/run/docker.sock:/var/run/docker.sock
  #   ports:
  #     - 8088:8080

  # hostm:
  #   image: quay.io/prometheus/node-exporter:latest
  #   container_name: hostm
  #   command:
  #     - '--path.rootfs=/host'
  #   # network_mode: host
  #   pid: host
  #   restart: unless-stopped
  #   expose:
  #     - 9100
  #   volumes:
  #     - '/:/host:ro,rslave'

  # prom:
  #   restart: always
  #   image: prom/prometheus
  #   container_name: prom
  #   volumes:
  #     - ./prometheus:/etc/prometheus
  #     - prometheus_data:/prometheus
  #     - /tmp:/tmp
  #   expose:
  #     - 9090
  #   ports:
  #     - 9090:9090
  #   depends_on:
  #     - montage

  # grafana:
  #   restart: always
  #   image: grafana/grafana-enterprise
  #   container_name: grafana
  #   volumes:
  #     - grafana_data:/var/lib/grafana
  #     - ./grafana:/etc/grafana
  #     - /tmp:/tmp
  #   expose:
  #     - 3000
  #   ports:
  #     - 3000:3000
  #   depends_on:
  #     - montage
  #     - prom

volumes:
  pgdata: {}
  # prometheus_data: {}
  # grafana_data: {}
